<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapbox Example</title>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.css" rel="stylesheet">
    <style>
        #map {
            height: 400px;
            margin-bottom: 20px;
        }

        nav {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
        }

        nav div {
            display: flex;
            align-items: center;
        }

        nav button {
            margin-right: 10px;
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            border-radius: 4px;
        }

        #input-boxes {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        #places-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        #places-table th, #places-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            cursor: pointer;
        }

        #places-table th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <nav>
        <div>
            <label for="address">Address:</label>
            <input type="text" id="address" placeholder="Enter address">
        </div>
        <div>
            <label for="landmark">Landmark:</label>
            <select id="landmark">
                <option value="hospital">Hospital</option>
                <option value="medical_center">Medical Center</option>
                <option value="doctor">Doctor's Office</option>
                <!-- Add more landmark options as needed -->
            </select>
        </div>
        <button onclick="updateMap()">Update Map</button>
    </nav>

    <div id="map"></div>

    <table id="places-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Distance (km)</th>
            </tr>
        </thead>
        <tbody id="places-list"></tbody>
    </table>

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.7.0/mapbox-gl.js"></script>
    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiYWRpdHlhYmFyYW53YWwiLCJhIjoiY2x0dHprb3o5MGVpYTJwb3VnNW1keWM2YiJ9.-Vh7H3Sw12q97IJwZ2N8Cw'; // Replace with your Mapbox access token

        let map;
        let placesList = document.getElementById('places-list');
        let markers = [];

        function updateMap() {
            const address = document.getElementById('address').value;
            const landmark = document.getElementById('landmark').value;

            if (address.trim() === "") {
                // If no address is provided, use current location
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        const currentLatitude = position.coords.latitude;
                        const currentLongitude = position.coords.longitude;

                        map.setCenter([currentLongitude, currentLatitude]);
                        map.setZoom(15); // Adjust the default zoom level
                        clearMarkers();
                        fetchPlaces(currentLatitude, currentLongitude, landmark);
                    },
                    function (error) {
                        console.error('Error getting current location:', error);
                    }
                );
            } else {
                // If an address is provided, convert it to coordinates
                fetchCoordinatesAndPlaces(address, landmark);
            }
        }

        function fetchCoordinatesAndPlaces(address, landmark) {
            const geocodingApiUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${mapboxgl.accessToken}`;

            fetch(geocodingApiUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.features.length > 0) {
                        const coordinates = data.features[0].center;

                        map.setCenter(coordinates);
                        map.setZoom(15); // Adjust the default zoom level
                        clearMarkers();
                        fetchPlaces(coordinates[1], coordinates[0], landmark);
                    } else {
                        console.error('No coordinates found for the provided address.');
                    }
                })
                .catch(error => console.error('Error fetching coordinates:', error));
        }

        function clearMarkers() {
            markers.forEach(marker => marker.remove());
            markers = [];
        }

        function fetchPlaces(latitude, longitude, landmark) {
            const apiUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(landmark)}.json?proximity=${longitude},${latitude}&limit=50&access_token=${mapboxgl.accessToken}`;

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    console.log('Data:', data); // Log the fetched data
                    clearMarkers();
                    placesList.innerHTML = ''; // Clear the table

                    if (data.features && data.features.length > 0) {
                        data.features.forEach(place => {
                            const placeLongitude = place.center[0];
                            const placeLatitude = place.center[1];

                            // Calculate distance between current location and place
                            const distance = calculateDistance(latitude, longitude, placeLatitude, placeLongitude);

                            // Check if the place is within the 20 km radius
                            if (distance <= 20) {
                                // Add a row to the table
                                const row = placesList.insertRow();
                                row.insertCell(0).innerText = place.text;
                                row.insertCell(1).innerText = place.properties.address || 'N/A';
                                row.insertCell(2).innerText = distance.toFixed(2); // Display distance with two decimal places

                                // Create a marker and bind it to the address for hover effect
                                const marker = new mapboxgl.Marker()
                                    .setLngLat(place.center)
                                    .setPopup(new mapboxgl.Popup().setHTML(`<b>${place.text}</b><br>${place.properties.address}`))
                                    .addTo(map);
                                markers.push(marker);

                                // Add event listeners for hover effect
                                row.addEventListener('mouseover', () => {
                                    marker.togglePopup();
                                    map.flyTo({
                                        center: place.center,
                                        essential: true // this animation is considered essential with respect to prefers-reduced-motion
                                    });
                                });
                                row.addEventListener('mouseout', () => marker.togglePopup());
                            }
                        });
                    } else {
                        console.error('No places found.');
                    }
                })
                .catch(error => console.error('Error fetching places:', error));
        }

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the Earth in kilometers
            const dLat = deg2rad(lat2 - lat1);
            const dLon = deg2rad(lon2 - lon1);
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            const distance = R * c; // Distance in kilometers
            return distance;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180);
        }

        document.addEventListener('DOMContentLoaded', function () {
            map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [0, 0], // Default center
                zoom: 15 // Adjust the default zoom level
            });

            // Initialize map with default values
            updateMap();

            // Add event listener to update map when address changes
            document.getElementById('address').addEventListener('change', updateMap);
        });
    </script>
</body>
</html>
